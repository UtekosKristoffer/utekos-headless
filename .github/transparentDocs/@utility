# Direktiver

## `@utility`

### Legge til egne "utilities"

#### Enkle "utilities"

I tillegg til å bruke de innebygde "utilities" som følger med Tailwind, kan du
også legge til dine egne. Dette kan være nyttig når det er en CSS-funksjon du
vil bruke i prosjektet ditt som Tailwind ikke tilbyr en "utility" for som
standard.

Bruk `@utility`-direktivet for å legge til en egendefinert "utility" i
prosjektet ditt:

```css
@utility content-auto {
  content-visibility: auto;
}
```

Du kan nå bruke denne "utility"-klassen i HTML-koden din: HTML

<div class="content-auto">
  </div>

Den vil også fungere med varianter som `hover`, `focus` og `lg`: HTML

<div class="hover:content-auto">
  </div>

Egendefinerte "utilities" blir automatisk satt inn i `utilities`-laget sammen
med alle de innebygde "utilities" i rammeverket. Markdown

#### Komplekse "utilities"

Hvis din egendefinerte "utility" er mer kompleks enn ett enkelt klassenavn, kan
du bruke nøsting for å definere den: CSS

```css
@utility scrollbar-hidden { &::-webkit-scrollbar { display: none; } } Markdown
```

#### Funksjonelle `utilities`

I tillegg til å registrere enkle "utilities" med `@utility`-direktivet, kan du
også registrere funksjonelle "utilities" som aksepterer et argument: CSS

```css
@utility tab-_ { tab-size: --value(--tab-size-_); } Markdown
```

Den spesielle `--value()`-funksjonen brukes for å hente ut "utility"-verdien.

#### Matche temaverdier

Bruk `--value(--theme-key-*)`-syntaksen for å hente ut "utility"-verdien mot et
sett med temanøkler: CSS

```css
@theme {
  --tab-size-2: 2;
  --tab-size-4: 4;
  --tab-size-github: 8;
}
```

```css
@utility tab-_ { tab-size: --value(--tab-size-_); } Markdown
```

Dette vil matche "utilities" som `tab-2`, `tab-4` og `tab-github`.

#### Legge til custom utilities

I `v3` ble alle egendefinerte klasser du definerte innenfor `@layer utilities`
eller `@layer` components plukket opp av Tailwind som en ekte utility-klasse, og
de fungerte automatisk med varianter som `hover`, `focus` eller `lg`.
Forskjellen var at `@layer` components alltid kom først i det genererte
stilarket.

I v4 bruker vi nå native cascade layers og overstyrer ikke lenger
`@layer`-regelen. Derfor har vi introdusert `@utility`-API-et som en erstatning:

```diff
/* v3 */
- @layer utilities {
-  .tab-4 {
-    tab-size: 4;
-  }
- }

/* v4 */
+ @utility tab-4 {
+ tab-size: 4;
+ }
```

Egendefinerte utilities blir nå også sortert basert på hvor mange egenskaper de
definerer. Dette betyr at komponent-utilities som `.btn` kan overskrives av
andre Tailwind-utilities uten ekstra konfigurering:

```diff
/* v3 */
- @layer components {
-  .btn {
-    border-radius: 0.5rem;
-    padding: 0.5rem 1rem;
-    background-color: ButtonFace;
-  }
- }

/* v4 */
+ @utility btn {
+ border-radius: 0.5rem;
+  padding: 0.5rem 1rem;
+  background-color: ButtonFace;
+ }
```

## Dokument om `@utility` slutt
